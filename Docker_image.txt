Сборка собственного образа
Сборка начинается с создания файла Dockerfile — он содержит инструкции того, что должно быть в контейнере. В качестве примера, соберем свой веб-сервер nginx.

Создание необходимых файлов и папок
Создайте папку с именем nginx-image и создайте папку с именем files.

mkdir nginx-image && cd nginx-image
mkdir files
Создание образца HTML-файла и конфигурационного файла
Когда вы создаете образ Docker для проектов, он содержит код или конфигурационные файлы приложения. Для демонстрационных целей мы создадим простой HTML-файл и конфигурационный файл в качестве кода нашего приложения и упакуем его с помощью Docker. Это простой index.html файл. Вы можете создать свой собственный.

Перейдите в папку files:

cd files
Создайте файл index.html.

vi index.html
Скопируйте следующее содержимое в index.html и сохраните файл.

<html>
  <head>
    <title>Dockerfile</title>
  </head>
  <body>
    <div class="container">
      <h1>My App</h1>
      <h2>This is my first app</h2>
      <p>Hello everyone, This is running via Docker container</p>
    </div>
  </body>
</html>
Создайте файл default.

vi default
Скопируйте следующее содержимое в файл:

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    
    root /usr/share/nginx/html;
    index index.html index.htm;

    server_name _;
    location / {
        try_files $uri $uri/ =404;
    }
}
Выбор базового образа
Выбор базового образа зависит от выбранного приложения и платформы операционной системы. В нашем случае, мы выберем базовый образ ubuntu:20.04 . Всегда используйте официальные базовые образы для своих приложений, чтобы избежать потенциальных уязвимостей. 

Создание файла Dockerfile
Создайте Dockerfile в папке nginx-image.

vi Dockerfile
Добавьте в Dockerfile простые команды:

FROM ubuntu:20.04  
RUN  apt-get -y update && apt-get -y install nginx
COPY files/default /etc/nginx/sites-available/default
COPY files/index.html /usr/share/nginx/html/index.html
EXPOSE 80
CMD ["/usr/sbin/nginx", "-g", "daemon off;"]
Объяснение каждого шага:

FROM - инструкция извлечет образ версии Ubuntu 20.04 из Docker Hub.
Во второй строке мы устанавливаем Nginx.
Затем мы копируем конфигурационный файл Nginx по умолчанию из локального каталога files  в каталог целевого образа.
Далее мы копируем наш файл index.html из локального каталога files в каталог целевого образа. Он перезапишет файл по умолчанию index.html, созданный во время установки Nginx.
Мы открываем порт 80, поскольку служба Nginx прослушивает порт 80.
Наконец, мы запускаем сервер Nginx, используя инструкцию CMD при запуске образа Docker.
Для контейнеров Docker директива daemon off; предписывает Nginx оставаться на переднем плане. Это отключает поведение Nginx при самодемонизации. Опция -g задает директиву для Nginx. Причина, по которой мы запускаем процесс на переднем плане, заключается в том, чтобы привязать консольный процесс к стандартному вводу, выводу и ошибке.

Создание собственного образа Docker
Окончательная структура папок и файлов будет выглядеть следующим образом:



Теперь мы создадим наш образ с помощью команды Docker. Приведенная ниже команда создаст образ, используя Dockerfile из того же каталога:

docker build -t nginx:1.0 .


Здесь: 

-t предназначен для пометки образа.
nginx - это название образа.
1.0 - это название тега. Если вы не добавляете никаких тегов, по умолчанию используется тег с именем latest .
. означает, что мы ссылаемся на расположение файла Dockerfile.
Если Dockerfile находится в другой папке, вам нужно указать его явно:

docker build -t nginx /path/to/folder 
Теперь мы можем вывести список образов с помощью этой команды:

docker images


Мы можем видеть, что указан тег 1.0. Если нужно указать конкретный тег, можно указать его следующим образом: image-name:<tag>. Если его не указать, по умолчанию он равен latest . 

docker build -t nginx:2.0 .
У одного образа может быть несколько тегов. Следует придерживаться двух подходов к пометке образа:

Стабильные теги – можно продолжать использовать определенный тег, который продолжает получать обновления.
Уникальные теги – используйте разные уникальные теги для каждого образа. Существуют разные способы предоставления уникальных тегов, например, отметки даты и времени, номера сборки, идентификатора фиксации и т.д.
Docker кэширует этапы сборки. Поэтому, если мы создадим образ снова, процесс будет продвигаться немного быстрее. Например, он больше не будет загружать образ ubuntu.

Протестируйте образ Docker 

Теперь, после создания образа, мы запустим образ Docker. Команда будет следующей:

docker run -d -p 9090:80 --name webserver nginx:1.0 


Здесь,

-d флаг предназначен для запуска контейнера в отключенном режиме;
-p устанавливает флажок для номера порта, формат - local-port:container-port;
--name - имя контейнера, в нашем случае, используется веб-сервер.
Мы можем проверить контейнер, используя приведенную ниже команду:

docker ps


В браузере перейдите на localhost:9090, и вы можете увидеть страницу, на которой отображается содержимое пользовательской HTML-страницы, которую мы добавили к образу Docker.
